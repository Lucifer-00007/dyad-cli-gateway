openapi: 3.0.3
info:
  title: Dyad CLI Gateway API
  description: |
    A pluggable, OpenAI-compatible gateway that enables Dyad (or any OpenAI-compatible client) 
    to communicate with CLI agents, local model servers, and vendor SDKs through a unified `/v1` API surface.
    
    The gateway provides:
    - **OpenAI-compatible endpoints** for seamless integration
    - **Provider management** system for registering AI providers
    - **Adapter pattern** supporting spawn-cli, http-sdk, proxy, and local model adapters
    - **Security & sandboxing** with containerized execution
    - **Rate limiting and authentication** via API keys
  version: 1.0.0
  contact:
    name: Dyad CLI Gateway
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.dyad.dev
    description: Production server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  # Health and Status Endpoints
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the gateway service
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "ok"
                timestamp: "2024-01-15T10:30:00.000Z"
                uptime: 3600
                service: "dyad-cli-gateway"
                version: "1.0.0"

  /ready:
    get:
      summary: Readiness check endpoint
      description: Returns the readiness status of the gateway service and its dependencies
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
              example:
                status: "ready"
                timestamp: "2024-01-15T10:30:00.000Z"
                checks:
                  database: "ok"
        '503':
          description: Service is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessErrorResponse'

  # OpenAI-Compatible v1 Endpoints
  /v1/models:
    get:
      summary: List available models
      description: Returns a list of available models across all enabled providers
      tags:
        - OpenAI v1
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelsResponse'
              example:
                object: "list"
                data:
                  - id: "gpt-4"
                    object: "model"
                    owned_by: "openai-proxy"
                    provider: "OpenAI Proxy"
                    max_tokens: 4096
                    context_window: 8192
                    supports_streaming: true
                    supports_embeddings: false
                  - id: "gemini-pro"
                    object: "model"
                    owned_by: "gemini-cli"
                    provider: "Gemini CLI"
                    max_tokens: 2048
                    context_window: 4096
                    supports_streaming: false
                    supports_embeddings: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/chat/completions:
    post:
      summary: Create chat completion
      description: |
        Creates a chat completion using the specified model and messages.
        The request is routed to the appropriate provider adapter based on the model.
      tags:
        - OpenAI v1
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
            example:
              model: "gpt-4"
              messages:
                - role: "system"
                  content: "You are a helpful assistant."
                - role: "user"
                  content: "Write a haiku about programming."
              max_tokens: 150
              temperature: 0.7
      responses:
        '200':
          description: Chat completion response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
              example:
                id: "chatcmpl-abc123"
                object: "chat.completion"
                created: 1690000000
                model: "gpt-4"
                choices:
                  - index: 0
                    message:
                      role: "assistant"
                      content: "Code flows like stream,\nBugs dance in morning sunlight,\nDebug brings peace."
                    finish_reason: "stop"
                usage:
                  prompt_tokens: 25
                  completion_tokens: 20
                  total_tokens: 45
            text/event-stream:
              schema:
                type: string
                description: |
                  Server-Sent Events stream when `stream: true` is specified.
                  Each event contains a JSON chunk in the format described by ChatCompletionChunk.
                  The stream ends with a `data: [DONE]` message.
              example: |
                data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1690000000,"model":"gpt-4","choices":[{"index":0,"delta":{"role":"assistant","content":""},"finish_reason":null}]}
                
                data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1690000000,"model":"gpt-4","choices":[{"index":0,"delta":{"content":"Code"},"finish_reason":null}]}
                
                data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1690000000,"model":"gpt-4","choices":[{"index":0,"delta":{"content":" flows"},"finish_reason":null}]}
                
                data: {"id":"chatcmpl-abc123","object":"chat.completion.chunk","created":1690000000,"model":"gpt-4","choices":[{"index":0,"delta":{},"finish_reason":"stop"}]}
                
                data: [DONE]
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v1/embeddings:
    post:
      summary: Create embeddings
      description: |
        Creates embeddings for the given input text using the specified model.
        Only models that support embeddings can be used for this endpoint.
      tags:
        - OpenAI v1
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsRequest'
            example:
              model: "text-embedding-ada-002"
              input: "The quick brown fox jumps over the lazy dog"
              encoding_format: "float"
      responses:
        '200':
          description: Embeddings response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingsResponse'
              example:
                object: "list"
                data:
                  - object: "embedding"
                    index: 0
                    embedding: [0.1, -0.2, 0.3, 0.4]
                model: "text-embedding-ada-002"
                usage:
                  prompt_tokens: 10
                  total_tokens: 10
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Admin API Endpoints
  /admin/providers:
    get:
      summary: List providers
      description: Get a paginated list of all providers with optional filtering
      tags:
        - Admin - Providers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: enabled
          in: query
          description: Filter by enabled status
          schema:
            type: string
            enum: ["true", "false"]
        - name: type
          in: query
          description: Filter by adapter type
          schema:
            type: string
            enum: ["spawn-cli", "http-sdk", "proxy", "local"]
      responses:
        '200':
          description: List of providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidersListResponse'
              example:
                results:
                  - id: "507f1f77bcf86cd799439011"
                    name: "OpenAI Proxy"
                    slug: "openai-proxy"
                    type: "proxy"
                    description: "Proxy to OpenAI API"
                    enabled: true
                    models:
                      - dyadModelId: "gpt-4"
                        adapterModelId: "gpt-4"
                        maxTokens: 4096
                        contextWindow: 8192
                        supportsStreaming: true
                        supportsEmbeddings: false
                    healthStatus:
                      status: "healthy"
                      lastChecked: "2024-01-15T10:30:00.000Z"
                    createdAt: "2024-01-15T09:00:00.000Z"
                    updatedAt: "2024-01-15T10:30:00.000Z"
                page: 1
                limit: 10
                totalPages: 1
                totalResults: 1
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AdminForbiddenError'

    post:
      summary: Create provider
      description: Create a new provider with the specified configuration
      tags:
        - Admin - Providers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderRequest'
            example:
              name: "Gemini CLI"
              slug: "gemini-cli"
              type: "spawn-cli"
              description: "Local Gemini CLI adapter"
              enabled: true
              models:
                - dyadModelId: "gemini-pro"
                  adapterModelId: "gemini-pro"
                  maxTokens: 2048
                  contextWindow: 4096
                  supportsStreaming: false
                  supportsEmbeddings: true
              adapterConfig:
                command: "/usr/local/bin/gemini"
                args: ["--json"]
                dockerSandbox: true
                sandboxImage: "gemini-cli:latest"
                timeoutSeconds: 60
              credentials:
                api_key: "your-gemini-api-key"
      responses:
        '201':
          description: Provider created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AdminForbiddenError'
        '409':
          description: Provider slug already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  message: "Provider slug already exists"
                  type: "invalid_request_error"
                  code: "duplicate_slug"

  /admin/providers/{providerId}:
    get:
      summary: Get provider
      description: Get a specific provider by ID
      tags:
        - Admin - Providers
      security:
        - BearerAuth: []
      parameters:
        - name: providerId
          in: path
          required: true
          description: Provider ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Provider details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AdminForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    patch:
      summary: Update provider
      description: Update an existing provider's configuration
      tags:
        - Admin - Providers
      security:
        - BearerAuth: []
      parameters:
        - name: providerId
          in: path
          required: true
          description: Provider ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProviderRequest'
            example:
              enabled: false
              description: "Temporarily disabled for maintenance"
      responses:
        '200':
          description: Provider updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AdminForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete provider
      description: Delete a provider and all its configurations
      tags:
        - Admin - Providers
      security:
        - BearerAuth: []
      parameters:
        - name: providerId
          in: path
          required: true
          description: Provider ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '204':
          description: Provider deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AdminForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /admin/providers/{providerId}/test:
    post:
      summary: Test provider
      description: Test provider connectivity and configuration
      tags:
        - Admin - Providers
      security:
        - BearerAuth: []
      parameters:
        - name: providerId
          in: path
          required: true
          description: Provider ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                dryRun:
                  type: boolean
                  default: false
                  description: Whether to perform a dry run test without actual execution
            example:
              dryRun: false
      responses:
        '200':
          description: Test completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderTestResponse'
              example:
                status: "success"
                message: "Provider test completed successfully"
                duration: 1250
                timestamp: "2024-01-15T10:30:00.000Z"
                testResult:
                  response: "Test message from provider"
                  tokensUsed: 15
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AdminForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /admin/providers/{providerId}/health:
    post:
      summary: Check provider health
      description: Perform a health check on the provider
      tags:
        - Admin - Providers
      security:
        - BearerAuth: []
      parameters:
        - name: providerId
          in: path
          required: true
          description: Provider ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Health check completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderHealthResponse'
              example:
                status: "healthy"
                message: "Provider configuration is valid"
                timestamp: "2024-01-15T10:30:00.000Z"
                duration: 150
                providerName: "Gemini CLI"
                providerType: "spawn-cli"
                lastChecked: "2024-01-15T10:30:00.000Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/AdminForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API_KEY
      description: |
        API key authentication for /v1 endpoints. 
        Use format: `Authorization: Bearer dyad_<your-api-key>`
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token authentication for admin endpoints.
        Use format: `Authorization: Bearer <jwt-token>`

  schemas:
    # Health Schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["ok"]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
          description: Service uptime in seconds
        service:
          type: string
          example: "dyad-cli-gateway"
        version:
          type: string
          example: "1.0.0"
      required:
        - status
        - timestamp
        - uptime
        - service

    ReadinessResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["ready"]
        timestamp:
          type: string
          format: date-time
        checks:
          type: object
          properties:
            database:
              type: string
              enum: ["ok", "error"]
          required:
            - database
      required:
        - status
        - timestamp
        - checks

    ReadinessErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["not ready"]
        timestamp:
          type: string
          format: date-time
        error:
          type: string
      required:
        - status
        - timestamp
        - error

    # OpenAI v1 Schemas
    ModelsResponse:
      type: object
      properties:
        object:
          type: string
          enum: ["list"]
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
      required:
        - object
        - data

    Model:
      type: object
      properties:
        id:
          type: string
          description: Model identifier
        object:
          type: string
          enum: ["model"]
        owned_by:
          type: string
          description: Provider slug that owns this model
        provider:
          type: string
          description: Human-readable provider name
        max_tokens:
          type: integer
          minimum: 1
          description: Maximum tokens this model can generate
        context_window:
          type: integer
          minimum: 1
          description: Maximum context window size
        supports_streaming:
          type: boolean
          description: Whether this model supports streaming responses
        supports_embeddings:
          type: boolean
          description: Whether this model supports embeddings
      required:
        - id
        - object
        - owned_by

    ChatCompletionRequest:
      type: object
      properties:
        model:
          type: string
          minLength: 1
          description: ID of the model to use
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          minItems: 1
          description: List of messages comprising the conversation
        max_tokens:
          type: integer
          minimum: 1
          maximum: 4096
          description: Maximum number of tokens to generate
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          description: Sampling temperature
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          description: Nucleus sampling parameter
        n:
          type: integer
          minimum: 1
          maximum: 128
          default: 1
          description: Number of completions to generate
        stream:
          type: boolean
          default: false
          description: Whether to stream back partial progress using Server-Sent Events
        stop:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
              maxItems: 4
          description: Stop sequences where the API will stop generating
        presence_penalty:
          type: number
          minimum: -2
          maximum: 2
          default: 0
          description: Presence penalty parameter
        frequency_penalty:
          type: number
          minimum: -2
          maximum: 2
          default: 0
          description: Frequency penalty parameter
        logit_bias:
          type: object
          additionalProperties:
            type: number
          description: Modify likelihood of specified tokens
        user:
          type: string
          description: Unique identifier for the end-user
      required:
        - model
        - messages

    ChatMessage:
      type: object
      properties:
        role:
          type: string
          enum: ["system", "user", "assistant"]
          description: Role of the message author
        content:
          type: string
          description: Content of the message
        name:
          type: string
          description: Name of the author (optional)
      required:
        - role
        - content

    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the completion
        object:
          type: string
          enum: ["chat.completion"]
        created:
          type: integer
          description: Unix timestamp of creation
        model:
          type: string
          description: Model used for the completion
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionChoice'
          description: List of completion choices
        usage:
          $ref: '#/components/schemas/Usage'
      required:
        - id
        - object
        - created
        - model
        - choices

    ChatCompletionChoice:
      type: object
      properties:
        index:
          type: integer
          description: Index of the choice
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string
          enum: ["stop", "length", "content_filter", "null"]
          description: Reason the completion finished
      required:
        - index
        - message
        - finish_reason

    ChatCompletionChunk:
      type: object
      description: Represents a streamed chunk of a chat completion response
      properties:
        id:
          type: string
          description: Unique identifier for the completion
        object:
          type: string
          enum: ["chat.completion.chunk"]
        created:
          type: integer
          description: Unix timestamp of creation
        model:
          type: string
          description: Model used for the completion
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionChunkChoice'
          description: List of completion choices
        usage:
          $ref: '#/components/schemas/Usage'
          description: Token usage (only present in final chunk)
      required:
        - id
        - object
        - created
        - model
        - choices

    ChatCompletionChunkChoice:
      type: object
      properties:
        index:
          type: integer
          description: Index of the choice
        delta:
          $ref: '#/components/schemas/ChatCompletionDelta'
        finish_reason:
          type: string
          enum: ["stop", "length", "content_filter", "null"]
          nullable: true
          description: Reason the completion finished (null until final chunk)
      required:
        - index
        - delta

    ChatCompletionDelta:
      type: object
      description: Delta object containing partial message content
      properties:
        role:
          type: string
          enum: ["assistant"]
          description: Role of the message author (only in first chunk)
        content:
          type: string
          description: Partial message content
      additionalProperties: false

    EmbeddingsRequest:
      type: object
      properties:
        model:
          type: string
          minLength: 1
          description: ID of the model to use for embeddings
        input:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          description: Input text to embed
        encoding_format:
          type: string
          enum: ["float", "base64"]
          default: "float"
          description: Format to return embeddings in
        user:
          type: string
          description: Unique identifier for the end-user
      required:
        - model
        - input

    EmbeddingsResponse:
      type: object
      properties:
        object:
          type: string
          enum: ["list"]
        data:
          type: array
          items:
            $ref: '#/components/schemas/Embedding'
        model:
          type: string
          description: Model used for embeddings
        usage:
          $ref: '#/components/schemas/Usage'
      required:
        - object
        - data
        - model
        - usage

    Embedding:
      type: object
      properties:
        object:
          type: string
          enum: ["embedding"]
        index:
          type: integer
          description: Index of the embedding
        embedding:
          type: array
          items:
            type: number
          description: Embedding vector
      required:
        - object
        - index
        - embedding

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
          minimum: 0
          description: Number of tokens in the prompt
        completion_tokens:
          type: integer
          minimum: 0
          description: Number of tokens in the completion
        total_tokens:
          type: integer
          minimum: 0
          description: Total number of tokens used
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens

    # Provider Management Schemas
    Provider:
      type: object
      properties:
        id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          description: Provider ID
        name:
          type: string
          maxLength: 100
          description: Human-readable provider name
        slug:
          type: string
          maxLength: 50
          pattern: '^[a-z0-9-]+$'
          description: Unique provider slug
        type:
          type: string
          enum: ["spawn-cli", "http-sdk", "proxy", "local"]
          description: Adapter type
        description:
          type: string
          maxLength: 500
          description: Provider description
        enabled:
          type: boolean
          description: Whether the provider is enabled
        models:
          type: array
          items:
            $ref: '#/components/schemas/ModelMapping'
          minItems: 1
          description: Model mappings for this provider
        adapterConfig:
          $ref: '#/components/schemas/AdapterConfig'
        healthStatus:
          $ref: '#/components/schemas/HealthStatus'
        rateLimits:
          $ref: '#/components/schemas/RateLimits'
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - slug
        - type
        - enabled
        - models
        - adapterConfig

    ModelMapping:
      type: object
      properties:
        dyadModelId:
          type: string
          description: Model ID exposed to clients
        adapterModelId:
          type: string
          description: Internal model ID used by adapter
        maxTokens:
          type: integer
          minimum: 1
          maximum: 1000000
          description: Maximum tokens for this model
        contextWindow:
          type: integer
          minimum: 1
          maximum: 1000000
          description: Context window size
        supportsStreaming:
          type: boolean
          default: false
          description: Whether model supports streaming
        supportsEmbeddings:
          type: boolean
          default: false
          description: Whether model supports embeddings
      required:
        - dyadModelId
        - adapterModelId

    AdapterConfig:
      type: object
      properties:
        # Common properties
        timeoutSeconds:
          type: integer
          minimum: 1
          maximum: 3600
          default: 60
          description: Request timeout in seconds
        retryAttempts:
          type: integer
          minimum: 0
          maximum: 10
          default: 3
          description: Number of retry attempts
        
        # Spawn-CLI specific
        command:
          type: string
          description: Command to execute (spawn-cli only)
        args:
          type: array
          items:
            type: string
          description: Command arguments (spawn-cli only)
        dockerSandbox:
          type: boolean
          default: true
          description: Use Docker sandbox (spawn-cli only)
        sandboxImage:
          type: string
          description: Docker image for sandbox (spawn-cli only)
        memoryLimit:
          type: string
          pattern: '^\d+[kmg]?$'
          default: "512m"
          description: Memory limit (spawn-cli only)
        cpuLimit:
          type: string
          pattern: '^\d*\.?\d+$'
          default: "0.5"
          description: CPU limit (spawn-cli only)
        
        # HTTP-SDK specific
        baseUrl:
          type: string
          format: uri
          description: Base URL for API calls (http-sdk only)
        headers:
          type: object
          additionalProperties:
            type: string
          description: Additional headers (http-sdk only)
        
        # Proxy specific
        proxyUrl:
          type: string
          format: uri
          description: Proxy URL (proxy only)
        
        # Local specific
        localUrl:
          type: string
          format: uri
          description: Local service URL (local only)
        healthCheckPath:
          type: string
          default: "/health"
          description: Health check path (local only)

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: ["healthy", "unhealthy", "unknown"]
          description: Current health status
        lastChecked:
          type: string
          format: date-time
          description: Last health check timestamp
        errorMessage:
          type: string
          description: Error message if unhealthy
      required:
        - status

    RateLimits:
      type: object
      properties:
        requestsPerMinute:
          type: integer
          minimum: 1
          maximum: 10000
          default: 60
          description: Requests per minute limit
        tokensPerMinute:
          type: integer
          minimum: 1
          maximum: 1000000
          default: 10000
          description: Tokens per minute limit
      required:
        - requestsPerMinute
        - tokensPerMinute

    CreateProviderRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Human-readable provider name
        slug:
          type: string
          maxLength: 50
          pattern: '^[a-z0-9-]+$'
          description: Unique provider slug
        type:
          type: string
          enum: ["spawn-cli", "http-sdk", "proxy", "local"]
          description: Adapter type
        description:
          type: string
          maxLength: 500
          description: Provider description
        enabled:
          type: boolean
          default: true
          description: Whether the provider is enabled
        models:
          type: array
          items:
            $ref: '#/components/schemas/ModelMapping'
          minItems: 1
          description: Model mappings for this provider
        adapterConfig:
          $ref: '#/components/schemas/AdapterConfig'
        credentials:
          type: object
          additionalProperties:
            type: string
          description: Provider credentials (will be encrypted)
        rateLimits:
          $ref: '#/components/schemas/RateLimits'
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
      required:
        - name
        - slug
        - type
        - models
        - adapterConfig

    UpdateProviderRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Human-readable provider name
        slug:
          type: string
          maxLength: 50
          pattern: '^[a-z0-9-]+$'
          description: Unique provider slug
        type:
          type: string
          enum: ["spawn-cli", "http-sdk", "proxy", "local"]
          description: Adapter type
        description:
          type: string
          maxLength: 500
          description: Provider description
        enabled:
          type: boolean
          description: Whether the provider is enabled
        models:
          type: array
          items:
            $ref: '#/components/schemas/ModelMapping'
          minItems: 1
          description: Model mappings for this provider
        adapterConfig:
          $ref: '#/components/schemas/AdapterConfig'
        credentials:
          type: object
          additionalProperties:
            type: string
          description: Provider credentials (will be encrypted)
        rateLimits:
          $ref: '#/components/schemas/RateLimits'
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
      minProperties: 1

    ProvidersListResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Provider'
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          description: Items per page
        totalPages:
          type: integer
          minimum: 0
          description: Total number of pages
        totalResults:
          type: integer
          minimum: 0
          description: Total number of results
      required:
        - results
        - page
        - limit
        - totalPages
        - totalResults

    ProviderTestResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["success", "failure"]
          description: Test result status
        message:
          type: string
          description: Test result message
        duration:
          type: integer
          minimum: 0
          description: Test duration in milliseconds
        timestamp:
          type: string
          format: date-time
          description: Test timestamp
        testResult:
          type: object
          properties:
            response:
              type: string
              description: Response from provider
            tokensUsed:
              type: integer
              minimum: 0
              description: Tokens used in test
          description: Detailed test results (if successful)
        error:
          type: object
          properties:
            type:
              type: string
              description: Error type
            message:
              type: string
              description: Error message
          description: Error details (if failed)
      required:
        - status
        - message
        - duration
        - timestamp

    ProviderHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["healthy", "unhealthy", "disabled"]
          description: Health status
        message:
          type: string
          description: Health check message
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
        duration:
          type: integer
          minimum: 0
          description: Health check duration in milliseconds
        providerName:
          type: string
          description: Provider name
        providerType:
          type: string
          enum: ["spawn-cli", "http-sdk", "proxy", "local"]
          description: Provider type
        lastChecked:
          type: string
          format: date-time
          description: Last health check timestamp
        error:
          type: object
          properties:
            type:
              type: string
              description: Error type
            message:
              type: string
              description: Error message
          description: Error details (if unhealthy)
      required:
        - status
        - message
        - timestamp
        - duration
        - providerName
        - providerType

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              description: Error message
            type:
              type: string
              description: Error type (OpenAI-compatible)
            code:
              type: string
              description: Error code (OpenAI-compatible)
            request_id:
              type: string
              description: Request ID for tracking
            stack:
              type: string
              description: Stack trace (development only)
          required:
            - message
            - type
            - code
      required:
        - error

  responses:
    # Common Error Responses
    BadRequestError:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              message: "Missing required fields: model and messages"
              type: "invalid_request_error"
              code: "invalid_request"
              request_id: "req_abc123"

    UnauthorizedError:
      description: Unauthorized - invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              message: "Invalid API key"
              type: "authentication_error"
              code: "invalid_api_key"
              request_id: "req_abc123"

    ForbiddenError:
      description: Forbidden - access denied for model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              message: "Access denied for model: gpt-4"
              type: "permission_error"
              code: "model_access_denied"
              request_id: "req_abc123"

    AdminForbiddenError:
      description: Forbidden - admin access required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              message: "Admin access required"
              type: "permission_error"
              code: "forbidden"
              request_id: "req_abc123"

    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              message: "Provider not found"
              type: "invalid_request_error"
              code: "not_found"
              request_id: "req_abc123"

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              message: "Rate limit exceeded"
              type: "rate_limit_error"
              code: "rate_limit_exceeded"
              request_id: "req_abc123"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              message: "Internal server error"
              type: "internal_error"
              code: "internal_server_error"
              request_id: "req_abc123"

tags:
  - name: Health
    description: Health and readiness endpoints
  - name: OpenAI v1
    description: OpenAI-compatible API endpoints
  - name: Admin - Providers
    description: Provider management endpoints

externalDocs:
  description: Dyad CLI Gateway Documentation
  url: https://github.com/dyad/cli-gateway/blob/main/README.md