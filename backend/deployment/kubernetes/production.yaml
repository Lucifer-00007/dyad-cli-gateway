apiVersion: v1
kind: Namespace
metadata:
  name: dyad-cli-gateway-prod
  labels:
    name: dyad-cli-gateway-prod
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dyad-cli-gateway-config
  namespace: dyad-cli-gateway-prod
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  CORS_ORIGIN: "https://dyad-cli-gateway.com"

---
apiVersion: v1
kind: Secret
metadata:
  name: dyad-cli-gateway-secrets
  namespace: dyad-cli-gateway-prod
type: Opaque
data:
  # These should be base64 encoded values
  # Use: echo -n "your-secret" | base64
  JWT_SECRET: ""  # Set during deployment
  MONGODB_URL: ""  # Set during deployment
  API_ENCRYPTION_KEY: ""  # Set during deployment

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dyad-cli-gateway-backend
  namespace: dyad-cli-gateway-prod
  labels:
    app: dyad-cli-gateway-backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: dyad-cli-gateway-backend
  template:
    metadata:
      labels:
        app: dyad-cli-gateway-backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: ghcr.io/your-org/dyad-cli-gateway-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PORT
          value: "3000"
        envFrom:
        - configMapRef:
            name: dyad-cli-gateway-config
        - secretRef:
            name: dyad-cli-gateway-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dyad-cli-gateway-gateway
  namespace: dyad-cli-gateway-prod
  labels:
    app: dyad-cli-gateway-gateway
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: dyad-cli-gateway-gateway
  template:
    metadata:
      labels:
        app: dyad-cli-gateway-gateway
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: gateway
        image: ghcr.io/your-org/dyad-cli-gateway-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PORT
          value: "8080"
        - name: GATEWAY_ENABLED
          value: "true"
        envFrom:
        - configMapRef:
            name: dyad-cli-gateway-config
        - secretRef:
            name: dyad-cli-gateway-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: sandbox
          mountPath: /app/sandbox
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: sandbox
        emptyDir:
          sizeLimit: 1Gi
      nodeSelector:
        kubernetes.io/os: linux

---
apiVersion: v1
kind: Service
metadata:
  name: dyad-cli-gateway-backend-service
  namespace: dyad-cli-gateway-prod
  labels:
    app: dyad-cli-gateway-backend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: dyad-cli-gateway-backend

---
apiVersion: v1
kind: Service
metadata:
  name: dyad-cli-gateway-gateway-service
  namespace: dyad-cli-gateway-prod
  labels:
    app: dyad-cli-gateway-gateway
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: dyad-cli-gateway-gateway

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dyad-cli-gateway-ingress
  namespace: dyad-cli-gateway-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
spec:
  tls:
  - hosts:
    - dyad-cli-gateway.com
    secretName: dyad-cli-gateway-tls
  rules:
  - host: dyad-cli-gateway.com
    http:
      paths:
      - path: /v1
        pathType: Prefix
        backend:
          service:
            name: dyad-cli-gateway-gateway-service
            port:
              number: 80
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: dyad-cli-gateway-backend-service
            port:
              number: 80
      - path: /health
        pathType: Prefix
        backend:
          service:
            name: dyad-cli-gateway-backend-service
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dyad-cli-gateway-backend-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dyad-cli-gateway-backend-hpa
  namespace: dyad-cli-gateway-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dyad-cli-gateway-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dyad-cli-gateway-gateway-hpa
  namespace: dyad-cli-gateway-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dyad-cli-gateway-gateway
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dyad-cli-gateway-backend-pdb
  namespace: dyad-cli-gateway-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: dyad-cli-gateway-backend

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: dyad-cli-gateway-gateway-pdb
  namespace: dyad-cli-gateway-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: dyad-cli-gateway-gateway

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dyad-cli-gateway-network-policy
  namespace: dyad-cli-gateway-prod
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
  - to:
    - namespaceSelector:
        matchLabels:
          name: mongodb
    ports:
    - protocol: TCP
      port: 27017