---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: dyad-gateway
  labels:
    app.kubernetes.io/name: dyad-gateway
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dyad-gateway-mongo
  namespace: dyad-gateway
  labels:
    app.kubernetes.io/name: dyad-gateway
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dyad-gateway
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dyad-gateway
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: dyad-gateway-secrets
              key: MONGODB_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dyad-gateway-secrets
              key: MONGODB_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "dyad-gateway"
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: init-script
        configMap:
          name: mongodb-init-script

---
apiVersion: v1
kind: Service
metadata:
  name: dyad-gateway-mongo
  namespace: dyad-gateway
  labels:
    app.kubernetes.io/name: dyad-gateway
    app.kubernetes.io/component: database
spec:
  selector:
    app.kubernetes.io/name: dyad-gateway
    app.kubernetes.io/component: database
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  namespace: dyad-gateway
  labels:
    app.kubernetes.io/name: dyad-gateway
    app.kubernetes.io/component: database
data:
  mongo-init.js: |
    // MongoDB initialization script for Gateway
    // This script runs when the MongoDB container starts for the first time

    // Switch to the gateway database
    db = db.getSiblingDB('dyad-gateway');

    // Create collections with initial indexes
    db.createCollection('providers');
    db.createCollection('apikeys');
    db.createCollection('auditlogs');

    // Create indexes for providers collection
    db.providers.createIndex({ "slug": 1 }, { unique: true });
    db.providers.createIndex({ "enabled": 1 });
    db.providers.createIndex({ "type": 1 });

    // Create indexes for apikeys collection
    db.apikeys.createIndex({ "keyHash": 1 }, { unique: true });
    db.apikeys.createIndex({ "enabled": 1 });
    db.apikeys.createIndex({ "expiresAt": 1 }, { expireAfterSeconds: 0 });

    // Create indexes for audit logs
    db.auditlogs.createIndex({ "timestamp": 1 });
    db.auditlogs.createIndex({ "action": 1 });
    db.auditlogs.createIndex({ "userId": 1 });

    print('Gateway database initialized successfully');